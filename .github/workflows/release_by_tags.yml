name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    runs-on: ubuntu-20.04
    steps:
      - name: Set environment variables
        run: |
          echo "::set-env name=APP_NAME::${PWD##*/}" && echo $APP_NAME
          echo "::set-env name=TAG_NAME::${GITHUB_REF##*/}" && echo $TAG_NAME

      - name: Create Release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, no need to create your own
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            See [https://github.com/${{github.repository}}/blob/${{env.TAG_NAME}}/CHANGELOG.md](https://github.com/${{github.repository}}/blob/${{env.TAG_NAME}}/CHANGELOG.md) for more information on what has changed.
          draft: false
          prerelease: false

  compile-and-add-assets:
    needs: create-release
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        os:
          - windows
          - linux
          - darwin
        architecture:
          - amd64
    steps:
      - name: Set environment variables
        shell: bash
        run: |
          echo "::set-env name=APP_NAME::${PWD##*/}" && echo $APP_NAME
          echo "::set-env name=TAG_NAME::${GITHUB_REF##*/}" && echo $TAG_NAME
          if [[ ${{ matrix.os }} == "windows" ]]; then
            echo "::set-env name=FILE_EXTENSION::.exe" && echo $FILE_EXTENSION
          else
            echo "::set-env name=FILE_EXTENSION::" && echo $FILE_EXTENSION
          fi

      - name: Checkout
        uses: actions/checkout@v2.3.2
        with:
          ref: main

      - name: Set golang version
        uses: actions/setup-go@v2
        with:
          go-version: "1.15.2"

      - name: Compile binary by defined matrix
        shell: bash
        run: |
          echo "os: ${{ matrix.os }}"
          echo "architecture: ${{ matrix.architecture }}"
          go version
          env GOOS=${{ matrix.os }} GOARCH=${{ matrix.architecture }} go build -o ./${APP_NAME}_${{ matrix.os }}_${{ matrix.architecture }}${FILE_EXTENSION} main.go
          # If FILE_EXTENSION is empty, there is no need to make the binary executable, because it is for windows.
          if test -z "${FILE_EXTENSION}"; then chmod +x ./${APP_NAME}_${{ matrix.os }}_${{ matrix.architecture }}${FILE_EXTENSION}; fi
          sha256sum ./${APP_NAME}_${{ matrix.os }}_${{ matrix.architecture }}${FILE_EXTENSION} | cut -d " " -f 1 > ./${APP_NAME}_${{ matrix.os }}_${{ matrix.architecture }}${FILE_EXTENSION}.sha256

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          hub release edit \
          -a ./${APP_NAME}_${{ matrix.os }}_${{ matrix.architecture }}${FILE_EXTENSION} -a ./${APP_NAME}_${{ matrix.os }}_${{ matrix.architecture }}${FILE_EXTENSION}.sha256 \
          -m "" "$TAG_NAME"

      - name: Upload compiled binary for next job(s)
        uses: actions/upload-artifact@v2
        with:
          name: release-assets
          path: ./${APP_NAME}_${{ matrix.os }}_${{ matrix.architecture }}${FILE_EXTENSION}

  create-deb-file:
    needs: compile-and-add-assets
    runs-on: ubuntu-20.04
    steps:
      - name: Set environment variables
        run: |
          echo "::set-env name=APP_NAME::${PWD##*/}" && echo $APP_NAME
          echo "::set-env name=TAG_NAME::${GITHUB_REF##*/}" && echo $TAG_NAME
          echo "::set-env name=DEBEMAIL::" && echo $DEBEMAIL
          echo "::set-env name=DEBFULLNAME::" && echo $DEBFULLNAME
          echo "::set-env name=FILEPATH::/usr/local/bin" && echo $FILEPATH

      - name: Checkout
        uses: actions/checkout@v2.3.2
        with:
          ref: main

      - name: Download release assets from previous job
        uses: actions/download-artifact@v2
        with:
          name: release-assets

      - name: Create deb-package for x64
        run: |
          sudo apt-get install -y devscripts
          cd .packaging
          mkdir -p ${APP_NAME}-${TAG_NAME:1}/DEBIAN
          cp ./postrm ${APP_NAME}-${TAG_NAME:1}/DEBIAN/
          mkdir -p ${APP_NAME}-${TAG_NAME:1}${FILEPATH}
          cp ./${APP_NAME}_linux_amd64 ${APP_NAME}-${TAG_NAME:1}${FILEPATH}/${APP_NAME}
          echo "Package: ${APP_NAME}
          Version: ${TAG_NAME:1}
          # Section names can be derived from https://packages.debian.org/buster/, look into the desired category name and take the last part of the url
          Section: utils
          Depends: 
          Priority: optional
          Architecture: amd64
          Maintainer: Till Hoffmann <till.hoffmann@enforge.de>
          Homepage: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}
          Installed-Size: $(du -sx --exclude DEBIAN ${APP_NAME}-${TAG_NAME:1}/ | cut -f1)
          Provides: ${APP_NAME}
          Conflicts: ${APP_NAME}
          Replaces: ${APP_NAME}
          # short description shouldn't be longer than 60 characters
          Description: short example description
          # long description
           long example description
           second line of long example description
          " > ${APP_NAME}-${TAG_NAME:1}/DEBIAN/control
          dpkg-deb --build ${APP_NAME}-${TAG_NAME:1}/
      
      - name: Upload deb-package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          hub release edit \
          -a .packaging/${APP_NAME}-${TAG_NAME:1}.deb \
          -m "" "$TAG_NAME"
      
